// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostScanOKCode is the HTTP code returned for type PostScanOK
const PostScanOKCode int = 200

/*
PostScanOK Scan complete

swagger:response postScanOK
*/
type PostScanOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostScanOK creates PostScanOK with default headers values
func NewPostScanOK() *PostScanOK {

	return &PostScanOK{}
}

// WithPayload adds the payload to the post scan o k response
func (o *PostScanOK) WithPayload(payload interface{}) *PostScanOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post scan o k response
func (o *PostScanOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostScanOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostScanBadRequestCode is the HTTP code returned for type PostScanBadRequest
const PostScanBadRequestCode int = 400

/*
PostScanBadRequest Invalid request

swagger:response postScanBadRequest
*/
type PostScanBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostScanBadRequest creates PostScanBadRequest with default headers values
func NewPostScanBadRequest() *PostScanBadRequest {

	return &PostScanBadRequest{}
}

// WithPayload adds the payload to the post scan bad request response
func (o *PostScanBadRequest) WithPayload(payload string) *PostScanBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post scan bad request response
func (o *PostScanBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostScanBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
