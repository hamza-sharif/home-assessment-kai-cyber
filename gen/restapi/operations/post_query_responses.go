// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostQueryOKCode is the HTTP code returned for type PostQueryOK
const PostQueryOKCode int = 200

/*
PostQueryOK List of matching results

swagger:response postQueryOK
*/
type PostQueryOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostQueryOK creates PostQueryOK with default headers values
func NewPostQueryOK() *PostQueryOK {

	return &PostQueryOK{}
}

// WithPayload adds the payload to the post query o k response
func (o *PostQueryOK) WithPayload(payload interface{}) *PostQueryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post query o k response
func (o *PostQueryOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostQueryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostQueryBadRequestCode is the HTTP code returned for type PostQueryBadRequest
const PostQueryBadRequestCode int = 400

/*
PostQueryBadRequest Invalid filter

swagger:response postQueryBadRequest
*/
type PostQueryBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostQueryBadRequest creates PostQueryBadRequest with default headers values
func NewPostQueryBadRequest() *PostQueryBadRequest {

	return &PostQueryBadRequest{}
}

// WithPayload adds the payload to the post query bad request response
func (o *PostQueryBadRequest) WithPayload(payload string) *PostQueryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post query bad request response
func (o *PostQueryBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostQueryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
